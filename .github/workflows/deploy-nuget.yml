name: Deploy nuget package

on:
  workflow_run:
    workflows: [ "Version build and test" ]
    branches: [ main ]
    types: 
      - completed
  
env:
  DOMAIN_PROJECT_PATH: 'src/DDD.Domain/DDD.Domain.csproj'
  DOMAIN_PACKAGE_NAME: 'DDD.Domain'
  APPLICATION_PROJECT_PATH: 'src/DDD.Application/DDD.Application.csproj'
  APPLICATION_PACKAGE_NAME: 'DDD.Application'
  DOMAIN_VALIDATION_PROJECT_PATH: 'src/DDD.Domain.Validation/DDD.Domain.Validation.csproj'
  DOMAIN_VALIDATION_PACKAGE_NAME: 'DDD.Domain.Validation'
  EVENTS_MEDIATR_PROJECT_PATH: 'src/DDD.Domain.Events.MediatR/DDD.Domain.Events.MediatR.csproj'
  EVENTS_MEDIATR_PACKAGE_NAME: 'DDD.Domain.Events.MediatR'
  VALIDATION_ASPNETCORE_PROJECT_PATH: 'src/DDD.Domain.Validation.AspNetCore/DDD.Domain.Validation.AspNetCore.csproj'
  VALIDATION_ASPNETCORE_PACKAGE_NAME: 'DDD.Domain.Validation.AspNetCore'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://nuget.pkg.github.com/${{ secrets.NUGET_USERNAME }}/index.json'

jobs:
  get-version:
    name: 'Get version'
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.previous-version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with: 
        ref: ${{ github.head_ref }}   # checkout the correct branch name
        fetch-depth: 0

    - name: Git version
      id: get-version
      uses: codacy/git-version@2.4.0
      with:
        release-branch: main
        prefix: v

  deploy:
    name: 'Deploy'
    runs-on: 'ubuntu-latest'
    needs: get-version
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Remove v from version
        uses: bhowell2/github-substring-action@v1.0.0
        id: remove-v-from-version
        with:
          value: ${{ needs.get-version.outputs.version }}
          index_of_str: "v"

      - name: Setup .NET Core SDK 8.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'
          
      - name: Install dependencies
        run: dotnet restore
        
      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Pack domain project
        run: dotnet pack ${{ env.DOMAIN_PROJECT_PATH }} --no-restore --no-build --configuration Release -p:IncludeSymbols=false -p:PackageVersion=${{ steps.remove-v-from-version.outputs.substring }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      
      - name: Pack application project
        run: dotnet pack ${{ env.APPLICATION_PROJECT_PATH }} --no-restore --no-build --configuration Release -p:IncludeSymbols=false -p:PackageVersion=${{ steps.remove-v-from-version.outputs.substring }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} 
      
      - name: Pack domain validation project
        run: dotnet pack ${{ env.DOMAIN_VALIDATION_PROJECT_PATH }} --no-restore --no-build --configuration Release -p:IncludeSymbols=false -p:PackageVersion=${{ steps.remove-v-from-version.outputs.substring }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      
      - name: Pack MediatR events project
        run: dotnet pack ${{ env.EVENTS_MEDIATR_PROJECT_PATH }} --no-restore --no-build --configuration Release -p:IncludeSymbols=false -p:PackageVersion=${{ steps.remove-v-from-version.outputs.substring }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} 
      
      - name: Pack AspNetCore validation project
        run: dotnet pack ${{ env.VALIDATION_ASPNETCORE_PROJECT_PATH }} --no-restore --no-build --configuration Release -p:IncludeSymbols=false -p:PackageVersion=${{ steps.remove-v-from-version.outputs.substring }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} 
      
      - name: Push packages
        run: dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg -k ${{ secrets.NUGET_AUTHENTICATION_TOKEN }} -s ${{ env.NUGET_SOURCE_URL }} --skip-duplicate
